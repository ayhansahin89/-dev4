using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArithmeticExpressionsDemo
{
    class Program
    {
        public static void Main(string[] args)
        {

            while (true)
            {
                Console.Write("Yeni İşlem giriniz : ");
                string inputValue = Console.ReadLine();

                if (string.IsNullOrEmpty(inputValue))
                    break;

                // Get all input character, Add to Array (Char)
                char[] charList = inputValue.ToCharArray();

                // Calculate CharList Input
                int result = ExpressionOperation(charList);

                Console.WriteLine("İşlem Sonucu :");
                Console.WriteLine("              {0}={1}\n", inputValue, result);

            }
        }

        /// <summary>
        /// Start to Calculation for input Array
        /// </summary>
        /// <returns></returns>
        public static int ExpressionOperation(char[] inputArray)
        {

            Stack<int> valueStack = new Stack<int>();
            Stack<char> operatorStack = new Stack<char>();

            operatorStack.Push('('); // Add "(" to operator stack

            int index = 0;
            while (index <= inputArray.Length)
            {
                // If there are any Closed Parenthesis, Remove it from stack
                if (index == inputArray.Length || inputArray[index] == ')')
                {
                    CloseParenthesis(valueStack, operatorStack);
                    index++;
                }
                // Add Input Numbers to ValueStack
                else if (inputArray[index] >= '0' && inputArray[index] <= '9')
                {
                    index = AddNumberToValueStack(inputArray, index, valueStack);
                }
                else
                {
                    InputOperator(inputArray[index], valueStack, operatorStack);
                    index++;
                }

            }
            return valueStack.Pop(); // Result stack values
        }

        /// <summary>
        /// Calculate inputValues according to Operator Types
        /// </summary>
        /// <param name="valueStack"></param>
        /// <param name="operatorStack"></param>
        static void Calculate(Stack<int> valueStack, Stack<char> operatorStack)
        {
            int sagTaraf = valueStack.Pop();
            int solTaraf = valueStack.Pop();
            char op = operatorStack.Pop();
            int result = 0;
            
            switch (op)
            {
                case '+':
                    result = sol + sag;
                    break;
                case '-':
                    result = sol - sag;
                    break;
                case '*':
                    result = sol * sag;
                    break;
                case '/':
                    result = sol / sag;
                    break;
                case '%':
                    result = sol % sag;
                    break;
            }
            valueStack.Push(result);
        }

        static void CloseParenthesis(Stack<int> valueStack, Stack<char> operatorStack)
        {
            while (operatorStack.Peek() != '(')
            {
                Calculate(valueStack, operatorStack);
            }
            operatorStack.Pop(); // Remove Parenthesis
        }

        static int AddNumberToValueStack(char[] charList, int index, Stack<int> valueStack)
        {
            int value = 0;
            while (index < charList.Length && charList[index] >= '0' && charList[index] <= '9')
            {
                value = 10 * value + (int)(charList[index++] - '0');
            }
            valueStack.Push(value);

            return index;
        }

        /// <summary>
        /// Input Operations Method for ValueStack according to OperatorType
        /// </summary>
        /// <param name="operatorType"></param>
        /// <param name="valueStack"></param>
        /// <param name="operatorStack"></param>
        private static void InputOperator(char operatorType, Stack<int> valueStack, Stack<char> operatorStack)
        {
            while (operatorStack.Count > 0 && CheckOperatorType(operatorType, operatorStack.Peek()))
            {
                Calculate(valueStack, operatorStack);
            }
            operatorStack.Push(operatorType);
        }

        static bool CheckOperatorType(char operatorType, char prevOperator)
        {
            bool result = false;
            switch (operatorType)
            {
                case '+':
                case '-':
                    result = (prevOperator != '(');
                    break;
                case '*':
                case '/':
                case '%':
                    result = (prevOperator == '*' || prevOperator == '/' || prevOperator == '%');
                    break;
                case ')':
                    result = true;
                    break;
            }
            return result;
        }

    }

}